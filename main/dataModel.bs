## Data model ## {#dataModel}

Note: This data model is a proposal made by the students and teachers of the [Software Architecture](http://arquisoft.github.io) Course (edition 2019/20) at the University of Oviedo.
 The data model is work-in-progress and we appreciate any feedback which can be done by [raising issues](https://arquisoft.github.io/viadeSpec/).

A **route** must contain a name, optionally it can have a description.
Its composed by a list of points which must conform be GeoCoordinates 
and may or not have a list of comments and media elements.

The **GeoCoordinates** must have latitude and longitude. 
They can have as optional properties a name, altitude and a physical address.

A **UserComment** must contain the text of the comment, 
 the time it was published and the author, 
 being the last one an IRI to a pod profile shape.

And finally, an **Image** or a **Video** must have an IRI to be a resource, 
 another IRI to the pod profile of the author and the time it was published.

<xmp highlight="turtle">
prefix :  <http://arquisoft.github.io/viadeSpec/>
prefix schema: <http://schema.org/>
prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd:    <http://www.w3.org/2001/XMLSchema#>
prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# Represents a route
:Route {
	schema:name		      xsd:string	 ;
	schema:description	xsd:string ? ;
	:point	            @:Point * ;
  :gpx                @:GPXShape ;  // See ShEx description for GPX Routes
	:hasComments		    xsd:string OR @:UserComment * ;
	:hasMediaAttached	  @:Image OR @:Video *;
}

:Point @:GeoCoordinates AND {
   :order xsd:integer ;
}
    
# Represents geo coordinates following: https://schema.org/GeoCoordinates
:GeoCoordinates {
	schema:latitude			xsd:decimal	;
	schema:longitude		xsd:decimal	;
	schema:elevation		xsd:decimal  ? ;
}

:UserComment IRI {
	schema:text			 xsd:string;
	schema:publishedDate xsd:datetime;
	schema:author		 @:PodProfile;
}

:Image {
	schema:contentUrl	 IRI ;
	schema:publishedDate xsd:datetime;
	schema:author		 @:PodProfile;
}

:Video {
	schema:contentUrl	 IRI;
	schema:publishedDate xsd:dateTime;
	schema:author		 @:PodProfile;
}

:PodProfile IRI 

# This model is work-in progress
:GPXShape {}   // See GPX section
</xmp>

### Simple routes examples ### {#SimpleRouteExamples}

An example of a route in Turtle following the previous Shape could be:

<xmp highlight="turtle">
prefix viade:  <http://arquisoft.github.io/viadeSpec/>
prefix :       <http://example.org/>
prefix schema: <http://schema.org/>
prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd:    <http://www.w3.org/2001/XMLSchema#>

:myRoute a viade:Route ;
 schema:name "My first route" ;
 schema:description "This is an example of route" ;
 viade:point [ 
  schema:latitude 47.64458 ; 
  schema:longitude -122.326897 ; 
  viade:order 1 
 ] ;
 viade:point [ 
  schema:latitude 47.644532; 
  schema:longitude -123.3345 ; 
  viade:order 2; 
  schema:elevation 34 
 ]; 
 viade:hasComments "I really enjoyed this route" ;
 viade:hasMediaAttached :media1 .

:media1 schema:contentUrl <http://example.org/picture.jpg> ;
        schema:publishedDate "2020-03-26T21:32:52"^^xsd:dateTime ;
        schema:author <https://labra.solid.community/profile/card#me> .
</xmp>

You can run the example using the [RDFShape tool](https://tinyurl.com/wx4fdhd) 

A possible SPARQL query to retrieve the route information and it's points can be:

<xmp highlight="turtle">
PREFIX schema: <http://schema.org/>
PREFIX viade:<http://arquisoft.github.io/viadeSpec/>
PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?lat ?long ?order ?name ?description ?name ?elevation WHERE {
 ?route a viade:Route.
 ?route viade:point ?point .
 ?point schema:latitude ?lat ;
        schema:longitude ?long ;
        viade:order ?order.
OPTIONAL {?route schema:description ?description.}
OPTIONAL {?route schema:name ?name.}
OPTIONAL {?point schema:elevation ?elevation.}
}
</xmp>

