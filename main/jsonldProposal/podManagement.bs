Pod Management {#podManagement}
=====================

It is crucial for the interoperability that we handle the POD data in the same way. Here is a proposal of what we can do. Note that this pretends to be an
starting point to the complete specification, and so it is open to discussion.

## File format ## {#fileFormat}
For the file format we can use JSON-LD, we have used JSON along the degree and we are very familiar with it,
it won't be a problem to handle that in the application, in fact Javascript facilitates that task with the built-in object "JSON".


### File example ### {#fileExample}
What comes next is an example of the **minimum** data that should be stored in the pod with the JSON-LD. More data could be added by our apps,
but at least this should be there.

The following properties can be found:

* name: the name of the route
* author: the webId of the creator of the route (optional)
* description: a description of the route (optional)
* waypoints: a list of waypoints (optional)
* points: points of the route, describing the path
* comments: a link (@id) to a file related with the route where the links to the users comments will be stored.
* resources: a list of links to resources.


The example (if any error is seen in the context, please point it out):

_If it cannot be seen in the include please check it manually because afterwards there will be mentions about it._
<pre class="include">path: jsonldProposal/jsonldExample.json</pre>

## Directory hierarchy in the POD ## {#directoryHierarchy}
Not only we need to state what information should be in the pod, but also where it is located.

We proposed a "viade" folder in the root of the pod, and inside it three folders: routes, comments, resources.

<pre>

viade/

		routes/

			example.jsonld
			example2.jsonld

		comments/

			myComments/
				userComment.jsonld
				userComment2.jsonld

			routeComments/
				ruta1Comments.jsonld
				ruta2Comments.jsonld

		resources/

			foto.jpg
			image.png
			video.mp4

		inbox/

			sharingNotification1.jsonld
			sharingNotification2.jsonld

		shared/

			luispresacollada.solid.community.jsonld

</pre>

### Comments and resources ### {#resources}
These two are thought to be in the pod of the user that truly owns them, therefore, a user will have in its pod comments and resources that will
be referenced from other routes (it is a graph, the file will be in many places)

We are considering two different folders even though they are just references because the way we would treat them, we may even not display those two groups
at the same time.


Due to the fact that we should allow other users to comment the routes, but we cannot let them edit the route file that leaded to the following approach.
Routes should have a link to a file that stores links to the comments of the users that commented. Consider the following example:

Luis published a route long ago, and now he shared it with his friend Sara. Sara wants to comment it. The application will create the comment in Sara's POD, because it's
her comment, and it will read from the route file its assigned file to comment (We are on Luis' POD), there it will write a link to Sara's comment in Sara's POD. These process
need to divide the comments folder into two subfolders: myComments and routeComments.

myComments will store the user's comments, in our previous example, Sara will write her comment in the directory viade/comments/myComments/ of her POD.

routeComments will store the files related with the routes, that have the links to the comments. In our previous example, Sara's app client will read in the shared route and locate
the comments file that will be in the directory viade/comments/routeComments/..., it will be a jsonLD file, and she will add here the link to the comment in her pod.


## What should be done about GPX? ## {#gpxToJson}
A gpx file can contain several elements "trk" (from the word "track") which are the ones that match our concept of "Route", that is a path, a sequence of points. Inside this label we can have
several "trkseg", which stand as sequences of ordered points (trkpt). Our duty will be to take all the trkpt and put them inside the "viade:points" property of the example json.

The gpx trk label can have a name and a description so it could be direct translation. Or we may want the user to introduce that data, that's an app design decision.

There is a type of points in a GPX called "waypoints", they are relevant points that are in some way related to the specified tracks. Assuming a path across a city,
a waypoint can be a church, a restaurant, a monument, and so far so forth. We will include this points in our routes jsonld files. They will have name, description  and coordinates.
Check the provided example to see its implementation. Elevation and description are optional attributes.


## How to share ## {#share}
We have performed a voting in order to follow the approach of the permissions, or use the inbox folder in order to manipulate the sharing functionality. In the end we wil be using the second
one. But for such a task we need some kind of agreement in the file structure in the "receiver". Assume Luis wants to share a route with Sara. Luis will give her permissions to the files,
and send her a notification, with the webid of the route and his own webid. Sara's app will parse the notification and add that route id to a file.

Such files will be placed in the folder viade/shared, and will have a name such as: luispresacollada.solid.community. (The corresponding part of the webID)
You may check the structure in the file "sharedRoutesExample", it contains a simple list with @id pointing to the shared routes.

<pre class="include">path: jsonldProposal/sharedRoutesExample.json</pre>

