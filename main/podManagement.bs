Pod Management {#intro}
=====================

It is crucial for the interoperability that we handle the POD data in the same way. Here is a proposal of what we can do. Note that this pretends to be an 
starting point to the complete specification, and so it is open to discussion.

## File format ##
For the file format we can use JSON-LD, we have used JSON along the degree and we are very familiar with it, 
it won't be a problem to handle that in the application, in fact Javascript facilitates that task with the built-in object "JSON".


### File example ###
What comes next is an example of the **minimum** data that should be stored in the pod with the JSON-LD. More data could be added by our apps,
but at least this should be there. 

_If the minimun data is wanted to be modified, for instance adding "Elevation" to the points, which would be something
quite common, then follow the repo rules to propose a change._

In the example provided, a route has name, description, points, comments and resources. Those two are references, since they may be in other PODs.

The example (if any error is seen in the context, please point it out):

_If it cannot be seen in the include please check it manually because afterwards there will be mentions about it._
<pre class="include">path: jsonldExample.json</pre>

## Directory hierarchy in the POD ##
Not only we need to state what information should be in the pod, but also where it is located.

We proposed a "viade" folder in the root of the pod, and inside it three folders: routes, comments, resources. This could be more visual.

<pre>

viade/

		routes/

			example.jsonld
			example2.jsonld

		comments/

			comment1.txt
			comment2.txt

		resources/

			foto.jpg
			image.png
			video.mp4

</pre>

### Comments and resources ###
These two are thought to be in the pod of the user that truly owns them, therefore, a user will have in its pod comments and resources that will 
be referenced from other routes (it is a graph, the file will be in many places)

We are considering two different folders even though they are just references because the way we would treat them, we may even not display those two groups
at the same time.

## How to share ##
The simplest idea for this seems to handle the permissions of the route files and when sharing a route give the "reciever" permissions to read the route file.

## What should be done about GPX? #
A gpx file can contain several elements "trk" which are the ones that match our concept of "Route", that is a path, a sequence of points. Inside this label we can have
several "tkrseg", which stand as sequences of oredered points (trkpt). Our duty will be to take all the tkrpt and put them inside the "viade:points" property of the example json.

The gpx trk label can have a name and a description so it could be direct translation. Or we may want the user to introduce that data, that's an app design decision.

